import java.util.*;
class Main {
    public static void main(String[] args) {
        int arr[] = {1,2,3,4};
        System.out.println(Arrays.toString(product(arr)));
    }
    static int[] rearrange(int arr[]){
        int pos[] = new int[arr.length/2];
        int neg[] = new int[arr.length/2];
        int res[] = new int[arr.length];
        int c=0;
        int k =0;
        for(int i =0;i<arr.length;i++){
            if(arr[i]>0){
                pos[c] = arr[i];
                c++;
            }
            if(arr[i]<0){
                neg[k] = arr[i];
                k++;
            }
        }
        c =0;
        k=0;
        for(int i =0;i<arr.length;i++){
            if((i%2)==0){
                res[i] = pos[c];
                c++;
            }
            else if((i%2)!=0){
                res[i] = neg[k];
                k++;
            }
        }
        return res;
    }
    
    static int[] optimalRearrange(int arr[]){
        int pos =0;
        int neg =1;
        int res[] = new int[arr.length];
        for(int i=0;i<arr.length;i++){
            if(arr[i]<0){
                res[neg] = arr[i];
                neg++;
            }
             if(arr[i]>0){
                res[pos] = arr[i];
                pos++;
            }
            
        }
        return res;
    }
    
     static int[] product(int arr[]){
        int ans[] = new int[arr.length];
        int val =1;
        int c =0;
        for(int i =0; i<arr.length;i++){
            for(int j =0;j<arr.length;j++){
                if(i==j){
                    continue;
                }
                else{
                    val = val*arr[j];
                }
            }
            ans[c] = val;
            c++;
            val=1;
        }
        return ans;
    }
    
    static int findPeakElement(int[] nums) {
        int n = nums.length;
        if(n==1){
            return 0;
        }
        if(nums[0]>nums[1]){
            return 0;
        }
        if(nums[n-1]>nums[n-2]){
            return n-1;
        }
        int start = 1;
        int end = n-2;
        while(start<=end){
            int mid = (start + end)/2;
            if(nums[mid]>nums[mid+1] && nums[mid]>nums[mid-1]){
                return mid;
            }
            else if(nums[mid]>nums[mid-1]){
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        return -1;
    }
}
